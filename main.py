import sys
import io
import time
import json
import base64
import logging
import requests
import telebot
from telebot import types

# ---------- CONFIG ----------
TELEGRAM_TOKEN = "–í–ê–®_TELEGRAM_TOKEN"
FUSION_API_KEY = "–í–ê–®_FUSION_API_KEY"
FUSION_SECRET = "–í–ê–®_FUSION_SECRET"
FUSION_BASE_URL = "https://api-key.fusionbrain.ai"
DEFAULT_MODEL_NAME = "Kandinsky"
# ----------------------------

if not TELEGRAM_TOKEN.startswith("PUT") and not FUSION_API_KEY.startswith("PUT"):
    pass
else:
    print("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_TOKEN –∏ FUSION_API_KEY –≤ –∫–æ–¥–µ")
    sys.exit(1)

AUTH_HEADERS = {
    "X-Key": f"Key {FUSION_API_KEY}",
    "X-Secret": f"Secret {FUSION_SECRET}",
    "Accept": "application/json",
}

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger("fusionbot")

bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode=None)
_user_lang = {}  # chat_id -> 'ru'|'en'

# ---------- Keyboard ----------
def main_keyboard(lang="ru"):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == "ru":
        kb.row("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "üîß –ü–æ–º–æ—â—å")
        kb.row("üåê –Ø–∑—ã–∫", "üìä –°—Ç–∞—Ç—É—Å")
        kb.row("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    else:
        kb.row("üñºÔ∏è Generate", "üîß Help")
        kb.row("üåê Lang", "üìä Status")
        kb.row("‚ÑπÔ∏è About")
    return kb

# ---------- API helpers ----------
def get_pipeline_id():
    url = f"{FUSION_BASE_URL}/key/api/v1/pipelines"
    r = requests.get(url, headers=AUTH_HEADERS, timeout=20)
    r.raise_for_status()
    data = r.json()
    for item in data:
        name = str(item.get("name") or "")
        if DEFAULT_MODEL_NAME.lower() in name.lower():
            return item.get("uuid") or item.get("id")
    return data[0].get("uuid") or data[0].get("id")

def submit_generation(prompt):
    pipeline_id = get_pipeline_id()
    payload = {
        "type": "GENERATE",
        "numImages": 1,
        "width": 512,
        "height": 512,
        "generateParams": {"query": prompt}
    }
    files = {"pipeline_id": (None, pipeline_id),
             "params": (None, json.dumps(payload), "application/json")}
    url = f"{FUSION_BASE_URL}/key/api/v1/pipeline/run"
    r = requests.post(url, headers=AUTH_HEADERS, files=files, timeout=40)
    r.raise_for_status()
    resp = r.json()
    return resp.get("uuid") or resp.get("id")

def poll_result(uuid, attempts=30, delay=2.0):
    url = f"{FUSION_BASE_URL}/key/api/v1/pipeline/status/{uuid}"
    for _ in range(attempts):
        r = requests.get(url, headers=AUTH_HEADERS, timeout=20)
        r.raise_for_status()
        d = r.json()
        status = str(d.get("status") or "").upper()
        if status == "DONE":
            return d.get("result") or {}
        if status == "FAIL":
            raise RuntimeError(d.get("errorDescription") or "Generation failed")
        time.sleep(delay)
    raise TimeoutError("Generation polling timed out")

def retrieve_image_bytes(file_repr):
    s = str(file_repr)
    if s.startswith("data:image/"):
        return base64.b64decode(s.split(",", 1)[1])
    elif s.startswith("http"):
        r = requests.get(s, timeout=30)
        r.raise_for_status()
        return r.content
    return base64.b64decode(s)

# ---------- Handlers ----------
@bot.message_handler(commands=["start"])
def cmd_start(m):
    chat_id = m.chat.id
    _user_lang.setdefault(chat_id, "ru")
    lang = _user_lang[chat_id]
    bot.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." if lang=="ru"
                     else "üëã Hi! Send a text prompt to generate an image.", reply_markup=main_keyboard(lang))

@bot.message_handler(commands=["help"])
def cmd_help(m):
    chat_id = m.chat.id
    lang = _user_lang.get(chat_id, "ru")
    help_ru = ("üîß –ö–æ–º–∞–Ω–¥—ã:\n"
               "/start ‚Äî —Å—Ç–∞—Ä—Ç\n"
               "/help ‚Äî –ø–æ–º–æ—â—å\n"
               "/lang ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞\n"
               "/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å\n\n"
               "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    help_en = ("üîß Commands:\n"
               "/start ‚Äî start\n"
               "/help ‚Äî help\n"
               "/lang ‚Äî change language\n"
               "/status ‚Äî check model\n\n"
               "Send text ‚Äî get image.")
    bot.send_message(chat_id, help_ru if lang=="ru" else help_en, reply_markup=main_keyboard(lang))

@bot.message_handler(func=lambda m: m.text and m.text.startswith("/"))
def unknown_command(m):
    chat_id = m.chat.id
    cmd = m.text.split()[0]
    lang = _user_lang.get(chat_id, "ru")
    msg = f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}" if lang=="ru" else f"‚ùì Unknown command: {cmd}"
    bot.send_message(chat_id, msg, reply_markup=main_keyboard(lang))

@bot.message_handler(func=lambda m: True)
def handle_prompt(m):
    chat_id = m.chat.id
    lang = _user_lang.get(chat_id, "ru")
    prompt = str(m.text).strip()
    if not prompt:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç." if lang=="ru" else "‚ö†Ô∏è Empty prompt.", reply_markup=main_keyboard(lang))
        return
    bot.send_message(chat_id, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." if lang=="ru" else "‚è≥ Generating...")
    try:
        uuid = submit_generation(prompt)
        result = poll_result(uuid)
        files = result.get("files") or []
        if not files:
            bot.send_message(chat_id, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç." if lang=="ru" else "‚ö†Ô∏è Empty result.", reply_markup=main_keyboard(lang))
            return
        img_bytes = retrieve_image_bytes(files[0])
        bio = io.BytesIO(img_bytes)
        bio.name = "result.png"
        bio.seek(0)
        bot.send_chat_action(chat_id, "upload_photo")
        bot.send_photo(chat_id, bio, caption=f"üñºÔ∏è {prompt}")
    except Exception as e:
        logger.exception("Error")
        bot.send_message(chat_id, ("‚ùå –û—à–∏–±–∫–∞: " + str(e)) if lang=="ru" else ("‚ùå Error: " + str(e)), reply_markup=main_keyboard(lang))

# ---------- start ----------
if __name__ == "__main__":
    print("Bot starting...")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)